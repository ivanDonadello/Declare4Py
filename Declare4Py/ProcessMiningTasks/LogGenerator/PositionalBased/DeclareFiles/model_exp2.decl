bind terapia_A, terapia_B: resource, qt, age
bind controllo: resource, age
bind analisi_sangue: resource, valore, age
# Cambiato 5 per problemi nel constraints
valore: float between 5.0 and 70.0
age: integer between 20 and 90
qt: float between 0.2 and 14.9
resource: A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y

# terapia_A deve stare SOLO in pos 2, terapia_B deve stare SOLO in pos 5
# Ci sono regole su posizione analisi_sangue e relativo valore (cresce, rimane stabile e poi decresce)
# Età paziente == 30

# absolute_pos(terapia_A, 2, _)
# absolute_payload(age, 30)
# payload_range(valore, 5.0, 10.0, _)
# !pos(terapia_A, !=2, _), !pos(terapia_B, !=5, _),

absolute_pos(terapia_A, 2, 2), absolute_pos(terapia_B, 5, 5),  pos(analisi_sangue, 1, _), pos(analisi_sangue, 3, _), pos(analisi_sangue, 6, _), pos(analisi_sangue, 9, _), pos(analisi_sangue, 11, _), pos(analisi_sangue, 15, _), pos(analisi_sangue, 17, _), pos(analisi_sangue, 19, _), absolute_payload(age, 30), payload(valore, :V1, 1), 5.0<=:V1, :V1<=10.0, payload(valore, :V3, 3), 15.0<=:V3, :V3<=40.0, payload(valore, :V6, 6), 50.0<=:V6, :V6<=70.0, payload(valore, :V9, 9), 50.0<=:V9, :V9<=70.0, payload(valore, :V11, 11), 50.0<=:V11, :V11<=70.0, payload(valore, :V15, 15), 50.0<=:V15, :V15<=70.0, payload(valore, :V17, 17), 30.0<=:V17, :V17<=40.0, payload(valore, :V19, 19), 5.0<=:V19, :V19<=15.0

# terapia_A e terapia_B NON vengono eseguite
# Ci sono regole su posizione analisi_sangue e relativo valore (cresce e rimane stabile)
# Età paziente == 60
# !pos(terapia_A, _, _), !pos(terapia_B, _, _),
# pos(analisi_sangue, 1, _), pos(analisi_sangue, 3, _), pos(analisi_sangue, 6, _), pos(analisi_sangue, 9, _), pos(analisi_sangue, 11, _), pos(analisi_sangue, 15, _), pos(analisi_sangue, 17, _), pos(analisi_sangue, 19, _), payload(valore, :V1, 1), 2<=:V1, :V1<=8, payload(valore, :V3, 3), 10<=:V3, :V3<=35, payload(valore, :V6, 6), 50<=:V6, :V6<=70, payload(valore, :V9, 6), 50<=:V9, :V9<=70, payload(valore, :V11, 11), 50<=:V11, :V11<=70, payload(valore, :V15, 15), 50<=:V15, :V15<=70, payload(valore, :V17, 17), 50<=:V17, :V17<=70, payload(valore, :V19, 19), 50<=:V19, :V19<=70, payload(age, 60, _)




# NUOVE FUNZIONI

payload(attributo a, valore v, posizione p) -> l'attributo a in posizione p deve avere valore v
payload(attributo a, !valore v, posizione p) -> l'attributo a in posizione p NON deve avere valore

# Attributi necessari: a, v ; p puo essere omesso con _ -> se p viene omesso clingo trovera un solo attributo con il seguente valore

payload_range(attributo a, int min, int max, posizione p) l'attributo a in posizione p avra' valore in range(min, max):

# Attributi necessari: a, v
# ; min o max possono essere omessi. se vengono omessi v in attribute value range se viene omesso solo 1 let: a <= x <= b then min = _, max = x imp x in [a,x] otherwise min = x, max = _ imp x in [x,b]
# ; p puo essere omesso con _ -> se p viene omesso clingo trovera un solo attributo con il seguente valore

absolute_payload(attribute a, value v) for every attribute a the value must be v

# Attributi necessari: a, v

absolute_pos(activity a, position p, time t)

# Attributi necessari: a, v ; t integer o _
# attivita' a si trovera in posizione p a tempo t e non potra trovarsi in nessun altro posto o tempo

pos(activity a, position p, time t)
Attributi presenti: a ; p e t = _ -> in una posizione p ad un tempo t ci sara' a
Attributi presenti: a, p; t = _ -> in un tempo t ci sara' a in posizione p
Attributi presenti: a, p, t -> a sara' in posizione p a tempo t






